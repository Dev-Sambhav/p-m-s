%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2369 915
%%HiResBoundingBox: 0 0 2368.0798 914.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2368.0798 914.88 re
W
q
[0.24 0 0 -0.24 0 914.88] cm
q
0 0 9866.667 3809.7773 re
W*
q
[3.124855 0 0 3.124118 0 0.00120781] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3157.4802 1220.47241 re
f
Q
q
[24.605154 0 0 24.599356 246.05154 245.99477] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
10 0 m
371 0 l
371.32755 0 371.65427 0.016051 371.98022 0.048153 c
372.30615 0.080255 372.6297 0.128253 372.9509 0.192147 c
373.27213 0.256042 373.58945 0.335525 373.90283 0.430597 c
374.21625 0.525668 374.52423 0.635871 374.82681 0.761205 c
375.12939 0.886538 375.42511 1.026399 375.71396 1.180787 c
376.00281 1.335175 376.28339 1.503348 376.55569 1.685304 c
376.82803 1.86726 377.09079 2.062124 377.34396 2.269896 c
377.59714 2.477667 377.83951 2.697346 378.07108 2.928932 c
378.30267 3.160518 378.52234 3.402896 378.7301 3.656067 c
378.9379 3.909237 379.13275 4.171981 379.31467 4.444297 c
379.49664 4.716614 379.66483 4.997192 379.81921 5.286032 c
379.9736 5.574872 380.11343 5.870583 380.23877 6.173165 c
380.36414 6.475747 380.47437 6.783743 380.56943 7.097153 c
380.66449 7.410563 380.74396 7.727877 380.80783 8.049096 c
380.87177 8.370316 380.91977 8.693893 380.95184 9.019829 c
380.98398 9.345764 381.00003 9.672488 381 10 c
381 125 l
381.00003 125.327515 380.98398 125.654236 380.95187 125.980171 c
380.91977 126.306099 380.87177 126.629669 380.80783 126.950882 c
380.74396 127.272102 380.66446 127.589424 380.5694 127.902832 c
380.47433 128.216232 380.36414 128.524231 380.23877 128.826813 c
380.11343 129.129395 379.9736 129.42511 379.81921 129.713959 c
379.66483 130.002792 379.49664 130.283371 379.31467 130.555679 c
379.13275 130.828003 378.9379 131.090759 378.7301 131.343933 c
378.52234 131.597107 378.30267 131.839478 378.07108 132.07106 c
377.83951 132.302643 377.59714 132.522324 377.34396 132.730103 c
377.09079 132.937866 376.82803 133.132721 376.55569 133.314667 c
376.28339 133.496628 376.00281 133.66481 375.71396 133.819199 c
375.42511 133.973587 375.12939 134.113449 374.82681 134.23877 c
374.52423 134.364105 374.21625 134.474319 373.90286 134.569397 c
373.58945 134.664474 373.27213 134.743958 372.9509 134.807846 c
372.6297 134.87175 372.30615 134.919754 371.98022 134.951843 c
371.65427 134.983948 371.32755 135 371 135 c
10 135 l
9.672488 135 9.345764 134.983948 9.019829 134.951843 c
8.693893 134.919754 8.370316 134.87175 8.049096 134.807846 c
7.727877 134.743958 7.410563 134.664474 7.097153 134.569397 c
6.783743 134.474319 6.475747 134.364105 6.173165 134.23877 c
5.870583 134.113449 5.574873 133.973587 5.286033 133.819199 c
4.997192 133.66481 4.716614 133.496628 4.444297 133.314667 c
4.171981 133.132721 3.909237 132.937866 3.656067 132.730103 c
3.402896 132.522324 3.160518 132.302643 2.928932 132.07106 c
2.697346 131.839478 2.477667 131.597107 2.269896 131.343933 c
2.062124 131.090759 1.86726 130.828003 1.685304 130.555679 c
1.503348 130.283371 1.335176 130.002792 1.180787 129.713959 c
1.026399 129.42511 0.886538 129.129395 0.761205 128.826813 c
0.635871 128.524231 0.525668 128.216248 0.430597 127.90284 c
0.335525 127.589424 0.256042 127.27211 0.192147 126.95089 c
0.128253 126.629669 0.080255 126.306099 0.048153 125.980171 c
0.016051 125.654236 0 125.327515 0 125 c
0 10 l
0 9.672488 0.016051 9.345764 0.048153 9.019829 c
0.080255 8.693893 0.128253 8.370316 0.192147 8.049096 c
0.256042 7.727877 0.335525 7.410563 0.430597 7.097153 c
0.525668 6.783743 0.635871 6.475747 0.761205 6.173165 c
0.886538 5.870583 1.026399 5.574873 1.180787 5.286033 c
1.335175 4.997192 1.503348 4.716614 1.685304 4.444297 c
1.86726 4.171981 2.062124 3.909237 2.269896 3.656067 c
2.477667 3.402896 2.697346 3.160518 2.928932 2.928932 c
3.160518 2.697346 3.402896 2.477667 3.656067 2.269896 c
3.909237 2.062124 4.171981 1.86726 4.444297 1.685304 c
4.716614 1.503348 4.997192 1.335176 5.286032 1.180787 c
5.574872 1.026399 5.870583 0.886538 6.173165 0.761205 c
6.475747 0.635871 6.783743 0.525668 7.097153 0.430597 c
7.410563 0.335525 7.727877 0.256042 8.049096 0.192147 c
8.370316 0.128253 8.693893 0.080255 9.019829 0.048153 c
9.345764 0.016051 9.672488 0 10 0 c
h
f
Q
q
[158.278763 0 0 158.24147 782.04736 -484.93652] cm
/DeviceRGB {} CS
[0.6118 0.1529 0.6902] SC
/DeviceRGB {} cs
[0.6118 0.1529 0.6902] sc
7.6 16.479999 m
7.6 17.01334 7.49996 17.513399 7.29996 17.98 c
7.09996 18.4466 6.82662 18.853319 6.47996 19.199999 c
6.1333 19.546679 5.72664 19.82 5.25996 20.019999 c
4.793281 20.219997 4.2933 20.319998 3.75996 20.319998 c
3.06662 20.319998 2.43666 20.156658 1.86996 19.829998 c
1.30326 19.503338 0.84666 19.059998 0.49996 18.499998 c
3.95996 15.879998 l
3.95996 10.059998 l
7.59996 10.059998 l
7.59996 16.479998 l
7.6 16.479999 l
h
f
Q
q
[78.14341 0 0 78.124992 2346.4663 881.09088] cm
/DeviceRGB {} CS
[0.6118 0.1529 0.6902] SC
/DeviceRGB {} cs
[0.6118 0.1529 0.6902] sc
1.3 16.959999 m
1.953333 17.359999 2.586667 17.559999 3.2 17.559999 c
3.84 17.559999 4.283333 17.356667 4.53 16.949999 c
4.776667 16.543331 4.900001 15.913332 4.9 15.059999 c
4.9 6.339998 l
5.3 6.259998 5.826667 6.219998 6.48 6.219998 c
7.133333 6.219998 7.673334 6.259998 8.1 6.339998 c
8.1 14.759998 l
8.1 15.613332 8.026667 16.376665 7.880001 17.049999 c
7.733334 17.723333 7.480001 18.293333 7.120001 18.759998 c
6.760001 19.226664 6.283334 19.58333 5.69 19.829998 c
5.096667 20.076666 4.353334 20.199999 3.460001 20.199999 c
2.220001 20.199999 1.133334 19.906666 0.200001 19.32 c
0.346667 18.4 0.713334 17.613333 1.300001 16.959999 c
1.3 16.959999 l
h
13.9 16.280001 m
14.259999 17.32 14.986667 17.84 16.08 17.84 c
16.626667 17.84 17.07 17.703333 17.41 17.43 c
17.75 17.156668 18.016666 16.809999 18.209999 16.389999 c
18.403332 15.969998 18.533331 15.499999 18.599998 14.98 c
18.666666 14.46 18.699999 13.946667 18.699999 13.44 c
18.699999 12.973333 18.683332 12.453333 18.65 11.879999 c
18.616667 11.306665 18.52 10.769999 18.359999 10.27 c
18.199997 9.770001 17.946665 9.35 17.599998 9.009999 c
17.253332 8.669998 16.746666 8.499998 16.079998 8.499999 c
15.439998 8.499999 14.949998 8.663332 14.609998 8.989999 c
14.269998 9.316666 14.016665 9.719998 13.849998 10.199999 c
13.683331 10.679999 13.579997 11.189999 13.539997 11.729999 c
13.499997 12.269999 13.479997 12.746665 13.479997 13.159999 c
13.479997 13.773333 13.509996 14.319999 13.569997 14.799999 c
13.629997 15.28 13.739997 15.773333 13.899997 16.279999 c
13.9 16.280001 l
h
12.28 19.040001 m
10.853333 17.853334 10.139999 15.900001 10.139999 13.18 c
10.139999 12.006667 10.276666 10.976667 10.549999 10.09 c
10.823333 9.203334 11.216666 8.46 11.73 7.86 c
12.243333 7.26 12.866667 6.806667 13.599999 6.5 c
14.333332 6.193333 15.159999 6.04 16.08 6.04 c
17 6.04 17.83 6.193333 18.57 6.5 c
19.309999 6.806667 19.936665 7.263333 20.449999 7.87 c
20.963333 8.476667 21.356667 9.223333 21.629999 10.11 c
21.903332 10.996666 22.039999 12.02 22.039999 13.179999 c
22.039999 14.339999 21.903332 15.363333 21.629999 16.25 c
21.356667 17.136667 20.963333 17.880001 20.449999 18.48 c
19.936665 19.079998 19.309999 19.533331 18.57 19.84 c
17.83 20.146669 17 20.300001 16.08 20.299999 c
14.56 20.299999 13.293333 19.879999 12.28 19.039999 c
12.28 19.040001 l
h
24.42 6.3 m
25.5 6.273334 26.423334 6.253334 27.190001 6.24 c
27.956667 6.226667 28.573334 6.22 29.040001 6.22 c
30.493334 6.22 31.636667 6.523334 32.470001 7.13 c
33.303333 7.736667 33.720001 8.646667 33.720001 9.860001 c
33.720001 10.446668 33.553333 10.993334 33.220001 11.500001 c
32.886669 12.006668 32.459999 12.373335 31.940001 12.600001 c
32.273335 12.706668 32.59 12.876668 32.889999 13.110002 c
33.189999 13.343335 33.446663 13.616669 33.66 13.930001 c
33.873337 14.243334 34.043335 14.583334 34.169998 14.950001 c
34.296661 15.316668 34.359993 15.693334 34.359997 16.08 c
34.359997 17.453333 33.923328 18.469999 33.049995 19.129999 c
32.176662 19.789999 30.939995 20.119999 29.339996 20.119999 c
28.846663 20.119999 28.193331 20.113333 27.379997 20.099998 c
26.566664 20.086664 25.579998 20.066666 24.419998 20.039999 c
24.279999 19.9 l
24.279999 6.44 l
24.42 6.3 l
h
29.1 13.98 m
27.440001 13.98 l
27.440001 17.879999 l
27.786667 17.866665 28.176668 17.866665 28.610001 17.879999 c
29.043333 17.893333 29.446667 17.859999 29.82 17.779999 c
30.193333 17.699999 30.506666 17.506664 30.76 17.199999 c
31.013334 16.893333 31.140001 16.466667 31.139999 15.919999 c
31.139999 15.4 30.976665 14.946666 30.65 14.56 c
30.323334 14.173333 29.806667 13.98 29.1 13.98 c
h
27.440001 8.48 m
27.440001 11.7 l
28.860001 11.7 l
29.5 11.7 29.950001 11.543333 30.210001 11.23 c
30.470001 10.916666 30.600002 10.533333 30.6 10.08 c
30.599998 9.626667 30.466665 9.25 30.200001 8.95 c
29.933336 8.65 29.48667 8.499999 28.860001 8.5 c
28.050001 8.5 l
28.050001 8.5 27.846668 8.493333 27.440001 8.48 c
h
39.759998 9.06 m
39.779999 10.620001 l
39.779999 11.880001 l
44.059998 11.880001 l
44.166664 12.280002 44.219997 12.716668 44.219997 13.190001 c
44.219997 13.663333 44.166664 14.099999 44.059998 14.5 c
39.779999 14.5 l
39.779999 20 l
39.353333 20.08 38.82 20.120001 38.18 20.120001 c
37.540001 20.120001 37.006668 20.08 36.580002 20 c
36.580002 6.46 l
36.720001 6.34 l
45.280003 6.34 l
45.360001 6.673334 45.400002 7.09 45.400002 7.59 c
45.400002 8.09 45.263336 8.46 44.990002 8.7 c
44.716667 8.94 44.286667 9.06 43.700001 9.06 c
39.760002 9.06 l
39.759998 9.06 l
h
52.34 17.299999 m
55.799999 17.299999 l
55.799999 17.833332 55.766666 18.289999 55.700001 18.67 c
55.633335 19.050001 55.420002 19.376667 55.060001 19.65 c
54.700001 19.923332 54.226665 20.059998 53.639999 20.059999 c
49.119999 20.059999 l
48.546665 20.059999 48.09333 19.893333 47.759998 19.559999 c
47.426666 19.226665 47.259998 18.773333 47.259998 18.199999 c
47.259998 6.339999 l
47.399998 6.199999 l
48.579998 6.199999 l
49.833332 6.199999 50.459999 6.879999 50.459999 8.24 c
50.459999 17.380001 l
51.046665 17.326668 51.673332 17.300001 52.34 17.300001 c
52.34 17.299999 l
h
60.400002 16.280001 m
60.760002 17.32 61.486668 17.84 62.580002 17.84 c
63.126667 17.84 63.570004 17.703333 63.910004 17.43 c
64.250008 17.156668 64.51667 16.809999 64.710007 16.389999 c
64.903343 15.969998 65.03334 15.499999 65.100006 14.98 c
65.166672 14.46 65.200005 13.946667 65.200005 13.44 c
65.200005 12.973333 65.183334 12.453333 65.150002 11.879999 c
65.116669 11.306665 65.019997 10.769999 64.860001 10.27 c
64.700005 9.770001 64.446671 9.35 64.099998 9.009999 c
63.75333 8.669998 63.246662 8.499998 62.579998 8.499999 c
61.939999 8.499999 61.449997 8.663332 61.109997 8.989999 c
60.769997 9.316666 60.516663 9.719998 60.349998 10.199999 c
60.183334 10.679999 60.080002 11.189999 60.039997 11.729999 c
59.999992 12.269999 59.979992 12.746665 59.979996 13.159999 c
59.979996 13.773333 60.009995 14.319999 60.069996 14.799999 c
60.129997 15.28 60.239998 15.773333 60.399998 16.279999 c
60.400002 16.280001 l
h
58.779999 19.040001 m
57.353333 17.853334 56.639999 15.900001 56.639999 13.18 c
56.639999 12.006667 56.776665 10.976667 57.049999 10.09 c
57.323334 9.203334 57.716667 8.46 58.23 7.86 c
58.743332 7.26 59.366665 6.806667 60.099998 6.5 c
60.833332 6.193333 61.659996 6.04 62.579998 6.04 c
63.5 6.04 64.330002 6.193333 65.07 6.5 c
65.809998 6.806667 66.436668 7.263333 66.949997 7.87 c
67.463326 8.476667 67.856659 9.223333 68.129997 10.11 c
68.403336 10.996666 68.540001 12.02 68.540001 13.179999 c
68.540001 14.339999 68.403336 15.363333 68.129997 16.25 c
67.856659 17.136667 67.463326 17.880001 66.949997 18.48 c
66.436668 19.079998 65.809998 19.533331 65.07 19.84 c
64.330002 20.146669 63.5 20.300001 62.579998 20.299999 c
61.059998 20.299999 59.793331 19.879999 58.779999 19.039999 c
58.779999 19.040001 l
h
71.919998 18.68 m
69.559998 6.52 l
70.199997 6.28 70.766663 6.16 71.259995 6.16 c
71.819992 6.16 72.226662 6.283334 72.479996 6.53 c
72.73333 6.776667 72.91333 7.24 73.019997 7.92 c
73.859993 13.08 l
74.113327 14.626666 74.273323 15.706666 74.339996 16.32 c
74.40667 16.933332 74.449997 17.253332 74.469994 17.279999 c
74.48999 17.306665 74.533318 17.319998 74.599991 17.32 c
76.259995 6.599999 l
76.753326 6.506666 77.439995 6.46 78.319992 6.46 c
79.199989 6.46 79.87999 6.506666 80.359993 6.599999 c
81.87999 17.059999 l
81.893318 17.18 81.916656 17.253332 81.949989 17.279999 c
81.983322 17.306665 82.033325 17.319998 82.099991 17.32 c
82.219994 16.066666 82.419991 14.646667 82.699989 13.06 c
83.819992 6.34 l
84.206657 6.26 84.653328 6.22 85.159988 6.22 c
85.773323 6.22 86.313324 6.293333 86.779991 6.44 c
86.919991 6.619999 l
84.279991 19.98 l
83.413322 20.073332 82.599991 20.119999 81.839989 20.119999 c
81.079987 20.119999 80.539986 20.026665 80.219986 19.839998 c
79.899986 19.653332 79.693314 19.266665 79.599983 18.679998 c
78.919983 14.339998 l
78.679985 12.766665 78.486649 11.219998 78.339981 9.699999 c
78.199982 9.699999 l
78.053314 10.993333 77.833313 12.539999 77.539978 14.339998 c
76.639977 19.979998 l
75.733307 20.07333 74.909973 20.119997 74.169975 20.119997 c
73.429977 20.119997 72.899979 20.026663 72.579979 19.839996 c
72.259979 19.65333 72.039978 19.266663 71.919975 18.679996 c
71.919998 18.68 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
